<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA//CQAFRFvABfULoGUUO5I1BCuiVgULoGWkm7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGFSugByZbUCUkC9NUo5wKJIOMLjRzjB5Eg5v55OPrw0c124AmJPvAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ2PogBKPr0AV0i6Ekw7v3hJOMTlSznL/0480f9OPND/STjJ/0Y2wOdJObuBVUa4FkIz
        uQCSh7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABqXrIAGgjSAFFCvi9KOcK1SjjK/E480/9TQdr/VUPd/1VD3P9RP9T/SjnJ/0Q0
        wP1FNru/TD+4Of//5gBrW7wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaVi4AMGkkgFQQcFJSTnI10s60P9RP9n/VkPg/1lG4/9bSeX/W0jl/1dF
        3/9QPtT/SjjJ/0Q0wf9DNbzgTD26VodstQJlUbkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdVvwC5qKIBVEDGVkw7zOZOPNb/VEHe/1lF5P9cSOb/Xkrp/2BM
        6v9fTOr/W0jl/1VD3P9PPdL/SjjJ/0Q0wf9ENLzsTTu5ZIBnvwNjT7wAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtXsYAAADXAFdEyVNQPdHoUkDb/1VE4v9ZRub/W0fn/1tI
        5/9cSuj/XErp/1xL6f9bSOb/VUPe/0491P9MOs3/STjH/0Q0wf9EM73uTTy7YbCsrwFkVrgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhXjIAEc20wBZSc8/UkHU4VRD3v9YRuX/W0jo/1tJ
        5f9kUd7/ZVPZ/2RS2P9kUtj/ZFHZ/2NQ1v9fTdH/WEbL/0k5yP9JOMn/SDfG/0Q0wf9ENb3pTD66TC4e
        uwBuYb0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdS9UAYVHUIVZF18tYRuD/XUvn/19N
        6v9gTuj/nY3k/93K3v/izNX/4svV/+HL1P/hytT/4crU/+HK1P/dxND/nIbF/0w7xf9KOsr/SDjH/0Q0
        wP9FNLrWUUC4LEk5uAC7sNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcF3ZAHlm1whcS9ucWUjh/19N
        5/9iUOv/YlDs/3Nj6P/o4e////nw///06v//8+r///Tp///z6v//8+r///Tq///z5f/v19L/aVbE/0o5
        zf9LOsz/RzfF/0Mzvv9INrmrYUy6DVtGuwAAAAAAAAAAAAAAAAAAAAAAAAAAAJmL1ABRP+IAZFLeVV1L
        4vRgT+b/ZVLq/2dV7P9lU+3/e2zo//Hs9f//+vf///Xv///17v//9e7///Xu///17v//9e7///Tr//bf
        1/90YMb/TDrQ/0880P9LOcv/RTXD/0MzvPlMO7lmJRO5AHVnuwAAAAAAAAAAAAAAAAAAAAAAcV3gAHNf
        4BRiT+PEYU/m/2ZU6f9pV+v/a1nr/2pX7P99b+f/7+rz//759P/99O3//vTt//707f/+9O3//vXu//70
        7f/+8uv/9N/W/3Zix/9PPtL/U0HU/048z/9JOMn/RDTC/0U2utFURLcdUEG4AAAAAAAAAAAAAAAAAJ+T
        3wBbRuYAaVbjYGNQ5vtnVej/a1nr/25d7P9xYuj/b1/p/4Fz5f/r5vD/+fTw//jw6f/58On/+fDq//rx
        6f/78er/+fDp//nu5//w29P/emjJ/1hJ1f9ZSdf/UT/U/006zv9HNsj/QzO//kk5unMgEbwAeG25AAAA
        AAAAAAAAfGvhAH9u4AtoVua5Z1Xo/2xb6v9vXuv/cF/s/3Jj6v9wYOr/g3Xn/+7p8v/89/P//PPs//zz
        6//98+z//fTs//vy6v/78ur/+e/n//Ld1f96aMz/Vkfa/1lI3v9TQdv/UD3U/0s5zf9FNcX/RTa8yldH
        uBRWRrkAAAAAAAAAAABvW+UAc1/kOWlW6O9sWur/cF/q/3Jh6/9yYuz/c2Lu/3Bf7v+Bcuv/7ur0///9
        9//++PP///jy///58v//+fL///jz//338f/58er/89/Z/3hl0/9XRuH/Wkjj/1ZE4P9SP9r/TjvS/0k3
        yf9ENMD3TTy6S0c1uwD///8AtazhAF1J6QBxXuZ2a1rp/3Bg6v90Y+v/dmXs/3Zm7f91Ze7/c2Pv/3Rk
        7f/Atu//9/L2//759v/79vT/+PP0//jz9P/79vT//vjz//fu7f/Dsd3/ZVPe/15M5/9dS+f/WUbj/1VC
        3v9QPtj/SznP/0Y1xP9KOryMAADIAIJ0wQCWh+QAqJXfBHJg6KtwYOv/dWXr/3lo7P97au3/fGvv/3lp
        8P93Z/D/dGPw/3Rk7f+dker/+O/u/8Kx2f98b93/f3Hj/7mu5//77+f/n43Y/2dX4f9lUun/ZVLr/2JQ
        6v9eS+j/WEbi/1NB2/9OO9L/SDbJ/0c4vr1gU7IKYFO4AId25gCGc+YPdWPsynZm7v98bO//fm/v/4Fx
        8P+BcPL/f27y/3ts8v94aPP/cmHy/4Fy7v/x6e//xK/V/1NC0/9SQtr/tajh//fo4v+Cb9r/Z1Xr/21a
        8P9qV+7/ZlTt/2FP6/9cSeX/VkTe/1E+1f9KOMv/Rje+2lVJthpXSrcAiXfoAIh26Bd5ae/Xe2zx/4Fz
        8v+EdfL/h3f0/4V29P+Cc/X/gG/1/3tr9f91ZfT/dGLx/8rC8f/57eb/wKvV/7ul1f/15uP/1MTg/3Nh
        5v9xYPH/c2Lz/3Bd8f9rWPD/ZFLs/19M6P9ZRuH/VEHX/0w6zf9GN7/lUkO5JFJDugCLfOgAiXroFXxu
        8NWAcfT/hnf1/4p59v+NfPj/i3v3/4d59/+EdPf/f2/3/3lp9v9xX/T/fm7w/8nA8f/x6e//8+ru/9DE
        6v+FdOj/cWHy/3ho9v94aPb/dWT0/3Bc8/9pVu//YU/q/1pI4v9VQ9n/TTzO/0c3wOJTRLkhVES6AJOG
        5wCThuQJf3DwvYN09v+JfPj/jX74/5GA+v+PgPr/i335/4d4+P+Acff/emn2/3Nh8/9qV/H/aVfs/3do
        6f95aun/a1rr/21b8f94Z/f/fGz5/31t+f96afj/dGL1/21a8v9kUuz/XUzj/1hF2/9OPc//SjrBzVxN
        uRFeT7sAqp/nAFlF/wCBcvCDgnL1/4p8+P+Pgvr/k4P7/5CB+/+Mfvr/h3n4/4Bw9/95aPX/cWDy/2lX
        7/9iUOv/XUno/11K6f9lUu3/b13z/3ln+P99bvn/f3D5/3xs+f93Zff/b13z/2ZV7f9gTuX/WEbb/04+
        zf9OPsKW//mLAXhmvwAAAAAAg3PwAId37iyAcPPfhnf3/4x++f+Qgvr/joH6/4t9+f+GePf/fm/2/3Zn
        8v9wXvD/Z1Xq/15M5P9ZR+D/WUfh/2FP6P9sWvD/dmX1/31t+f+AcPr/fW35/3dm+P9xXvT/aVfu/2BO
        5P9XRdn/UEDM6VhHwztSQcUAqaa6AAAAAACXiucAAAD/AIJ072GAcfTwhnf3/4t9+f+Lfvn/iHr4/4R1
        9v98bfP/c2Tu/2tb6v9iUOP/WUfb/1VD1vdUQ9b5W0jf/2ZT6v9xX/H/eWj2/3xs+P96avj/dWP2/25c
        8v9mVOv/Xkvh/1dF1/RYSM5wiYO1AmtfyAAAAAAAAAAAAAAAAACRguYAmozgA4N17lyBcfLdg3T2/4R1
        9v+Cc/X/fW7z/3Zm7/9tXun/ZlXk/2BO3ehcS9WUXU3QRVlLz05cStihYk7j7WlW6/9vXvD/cmLz/3Fg
        8/9tW/D/ZlXs/2FQ5f9eTdzfX1DVZXNlzAZsXc8AAAAAAAAAAAAAAAAAAAAAAAAAAACekeAA2tDIAYh4
        6yqCcvCHgHDyyXxs8eN5ae3nc2Pp3W1d5b1qWt5+a1rXMHprzQR0Y9IAb1vWAHdm0AZrV903aVflhGtZ
        675rWezbaFfq5GdV6N1kVOTBZVTggGpa2SmVj8ABfHHRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAApJPfAK6d3QGQgOcPhXXpIoBx5Sd9b+IdiHjeCs68rwCnmMcAAAAAAAAAAAAAAAAAAAAAAKCQ
        2wC3qNUAhXXiCnZm5BpvYOEjcWLgHHtw2wutnMEAmYrNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////D////AP///gB///wAP//wAA//4AAH/+AAA//AAAP/gA
        AB/wAAAP8AAAD+AAAAfgAAAHwAAAA8AAAAPAAAADgAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAA+AA
        AAPgAAAH8AGAD/wP8H////////////////8=
</value>
  </data>
</root>